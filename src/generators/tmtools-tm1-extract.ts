//─────────────────────────────────────────────────────────────────────────────────────────────────┐
/**
 * @file          generators/tmtools-tm1-extract.ts
 * @copyright     Vivek M. Chawla / Salesforce - 2019
 * @author        Vivek M. Chawla <@VivekMChawla>
 * @summary       Yeoman Generator for extracting TM1 metadata and data from an org.
 * @description   Salesforce CLI Plugin command (tmtools:tm1:extract) that allows a Salesforce
 *                Administrator to extract Territory Management (TM1) metadata and data from an
 *                org that they have connected their Salesforce CLI to. Extracted files are saved
 *                locally in a format that can be fed to the tmtools:tm1:transform command.
 * @version       1.0.0
 * @license       MIT
 */
//─────────────────────────────────────────────────────────────────────────────────────────────────┘
// Import External Libraries & Modules
import {fs}       from  '@salesforce/core'; // File System utility from the Core SFDX library.
import chalk      from  'chalk';            // Helps write colored text to the console.
import * as path  from  'path';             // Library. Helps resolve local paths at runtime.

// Import Internal Libraries
import * as iq                          from  '../modules/sfdx-falcon-util/interview-questions';  // Library. Helper functions that create Interview Questions.
import * as listrTasks                  from  '../modules/sfdx-falcon-util/listr-tasks';          // Library. Helper functions that make using Listr with SFDX-Falcon easier.

// Import Internal Classes & Functions
import {SfdxFalconDebug}                from  '../modules/sfdx-falcon-debug';                     // Class. Provides custom "debugging" services (ie. debug-style info to console.log()).
import {SfdxFalconError}                from  '../modules/sfdx-falcon-error';                     // Class. Extends SfdxError to provide specialized error structures for SFDX-Falcon modules.
import {SfdxFalconInterview}            from  '../modules/sfdx-falcon-interview';                 // Class. Provides a standard way of building a multi-group Interview to collect user input.
import {SfdxFalconKeyValueTableDataRow} from  '../modules/sfdx-falcon-util/ux';                   // Interface. Represents a row of data in an SFDX-Falcon data table.
import {SfdxFalconTableData}            from  '../modules/sfdx-falcon-util/ux';                   // Interface. Represents and array of SfdxFalconKeyValueTableDataRow objects.
import {GeneratorOptions}               from  '../modules/sfdx-falcon-yeoman-command';            // Interface. Represents options used by SFDX-Falcon Yeoman generators.
import {SfdxFalconYeomanGenerator}      from  '../modules/sfdx-falcon-yeoman-generator';          // Class. Abstract base class class for building Yeoman Generators for SFDX-Falcon commands.
import TmFilePaths                      from  '../modules/tm-tools-objects/tm-file-paths';        // Class. Utility class for generatig File Paths required by various TM-Tools commands.

// Import Falcon Types
import {ListrTaskBundle}                from  '../modules/sfdx-falcon-types';                     // Interface. Represents the suite of information required to run a Listr Task Bundle.
import {StatusMessageType}              from  '../modules/sfdx-falcon-types';                     // Enum. Represents the various types/states of a Status Message.

// Import TM-Tools Types
import {TM1AnalysisReport}              from  '../modules/tm-tools-types';                        // Interface. Represents the data that is generated by a TM1 Analysis Report.
import {TM1ExtractFilePaths}            from  '../modules/tm-tools-types';                        // Interface. Represents the complete suite of file paths required by the TM1 Extract command.
import {TM1ContextValidation}           from  '../modules/tm-tools-types';                        // Interface. Represents the structure of the return value of the Tm1Context.validate() function.

// Requires
const yosay = require('yosay');   // ASCII art creator brings Yeoman to life.

// Set the File Local Debug Namespace
const dbgNs = 'GENERATOR:tmtools-tm1-extract:';
SfdxFalconDebug.msg(`${dbgNs}`, `Debugging initialized for ${dbgNs}`);


//─────────────────────────────────────────────────────────────────────────────────────────────────┐
/**
 * @interface   InterviewAnswers
 * @description Represents answers to the questions asked in the Yeoman interview.
 */
//─────────────────────────────────────────────────────────────────────────────────────────────────┘
interface InterviewAnswers {
  baseDirectory:  string;
}

//─────────────────────────────────────────────────────────────────────────────────────────────────┐
/**
 * @class       Tm1Extract
 * @extends     SfdxFalconYeomanGenerator
 * @summary     Yeoman generator class. Extracts TM1 configuration (data+metadata) from target org.
 * @description Uses Yeoman to run the user through an interview, then extracts TM1 configuration
 *              data and metadata from the target org specified by the user's tm1-analysis.json file.
 * @public
 */
//─────────────────────────────────────────────────────────────────────────────────────────────────┘
export default class Tm1Extract extends SfdxFalconYeomanGenerator<InterviewAnswers> {

  // Define class members specific to this Generator.
  protected tm1ExtractFilePaths:  TM1ExtractFilePaths;  // Holds a complete set of known (and knowable) file paths needed by the Extract command.
  protected tm1AnalysisReport:    TM1AnalysisReport;    // Report data created by a previously executed TM1 Analysis.
  protected tm1ContextValidation: TM1ContextValidation; // Holds information about the crurrent state of TM1 data downloaded locally.

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @constructs  Tm1Extract
   * @param       {string|string[]} args Required. Not used (as far as I know).
   * @param       {GeneratorOptions}  opts Required. Sets generator options.
   * @description Constructs a Tm1Extract object.
   * @public
   */
  //───────────────────────────────────────────────────────────────────────────┘
  constructor(args:string|string[], opts:GeneratorOptions) {

    // Call the parent constructor to initialize the Yeoman Generator.
    super(args, opts);

    // Initialize the "Opening Message" and "Confirmation Question".
    this.openingMessage       = `TM-Tools Plugin\n${this.cliCommandName}\nv${this.pluginVersion}`;
    this.confirmationQuestion = 'Extract TM1 configuration using the above settings?';

    // Initialize all Reports to NULL.
    this.tm1AnalysisReport = null;

    // Initialize DEFAULT Interview Answers.
    this.defaultAnswers.baseDirectory = path.resolve(opts.sourceDir as string);

    // Initialize Shared Data.
    this.sharedData['reportJson']           = {};
    this.sharedData['tm1ContextValidation'] = {};
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      _buildInterview
   * @returns     {SfdxFalconInterview<InterviewAnswers>} Returns a fully fleshed
   *              SfdxFalconInterview object with zero or more prompts that the
   *              user will answer in an interview once this is run.
   * @description Allows the developer to build a complex, multi-step interview
   *              that Yeoman will execute during the "prompting" phase.
   * @protected
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected _buildInterview():SfdxFalconInterview<InterviewAnswers> {

    // Initialize the Interview object.
    const interview = new SfdxFalconInterview<InterviewAnswers>({
      defaultAnswers:     this.defaultAnswers,
      confirmation:       iq.confirmProceedRestart,
      confirmationHeader: chalk.yellow('Review Your Settings:'),
      display:            this._buildInterviewAnswersTableData,
      context:            this,
      sharedData:         this.sharedData
    });

    // Group 0: Specify the directory containing the TM1 org analysis.
    interview.createGroup({
      title:          chalk.yellow('\nTM1 Analysis Directory:'),
      questions:      iq.provideReportDirectory,
      questionsArgs:  [TmFilePaths.getTmFileNames().tm1AnalysisReportFileName]
    });

    // Finished building the Interview.
    return interview;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      _buildInterviewAnswersTableData
   * @param       {InterviewAnswers}  userAnswers Required.
   * @returns     {Promise<SfdxFalconTableData>}
   * @description Builds an SfdxFalconTableData object based on the Interview
   *              Answer values provided by the caller. This function can be
   *              used by an SfdxFalconInterview to reflect input to the user
   *              at the end of an Interview.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async _buildInterviewAnswersTableData(interviewAnswers:InterviewAnswers):Promise<SfdxFalconTableData> {

    // Declare an array of Falcon Table Data Rows
    const tableData = new Array<SfdxFalconKeyValueTableDataRow>();

    // Grab the TM1 Analysis Report from Shared Data, then extract required fields from it.
    const tm1AnalysisReport   = this.sharedData['reportJson'] as TM1AnalysisReport;
    const orgId               = tm1AnalysisReport.orgInfo.orgId;
    const alias               = tm1AnalysisReport.orgInfo.alias;
    const username            = tm1AnalysisReport.orgInfo.username;
    const loginUrl            = tm1AnalysisReport.orgInfo.loginUrl;
    const createdOrgInstance  = tm1AnalysisReport.orgInfo.createdOrgInstance;

    // User-supplied answer.
    tableData.push({option:'TM1 Analysis Directory:', value:`${interviewAnswers.baseDirectory}`});

    // Answers read from the specified tm1-analysis.json file.
    tableData.push({option:'Alias:',        value:`${alias}`});
    tableData.push({option:'Username:',     value:`${username}`});
    tableData.push({option:'Org ID:',       value:`${orgId}`});
    tableData.push({option:'Login Url:',    value:`${loginUrl}`});
    tableData.push({option:'Org Instance:', value:`${createdOrgInstance}`});

    // Return the Falcon Table Data.
    return tableData;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      _extractTm1Config
   * @returns     {Promise<void>}
   * @description Uses information from the User's "Final Answers" to do a
   *              MDAPI/SOQL retrievals of all TM1 metadata and data from
   *              the Target Org indicated by the Final Answers.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async _extractTm1Config():Promise<void> {

    // Define the FIRST Task Bundle
    const firstTaskBundle:ListrTaskBundle = {
      dbgNsLocal:     `${dbgNs}_extractTm1Config:T1`, // Local Debug Namespace for this function. DO NOT add trailing : char.
      throwOnFailure: true,                           // Define whether to throw an Error on task failure or not.
      preTaskMessage: {                               // Message displayed to the user BEFORE tasks are run.
        message: `Extracting TM1 Configuration From the Target Org...`,
        styling: `yellow`
      },
      generatorStatusSuccess: {                       // Generator Status message used on SUCCESS.
        type:     StatusMessageType.SUCCESS,
        title:    `Extract TM1 Config`,
        message:  `TM1 configuration successfully extracted from Salesforce`
      },
      generatorStatusFailure: {                       // Generator Status message used on FAILURE.
        type:     StatusMessageType.ERROR,
        title:    `Extract TM1 Config`,
        message:  `Could not extract TM1 config from Salesforce`
      },
      listrObject:                                    // The Listr Tasks that will be run.
        listrTasks.extractTm1Config.call(this,
                                         this.tm1AnalysisReport,
                                         this.tm1ExtractFilePaths)
    };

    // Define the SECOND Task Bundle
    const secondTaskBundle:ListrTaskBundle = {
      dbgNsLocal:     `${dbgNs}_extractTm1Config:T2`, // Local Debug Namespace for this function. DO NOT add trailing : char.
      throwOnFailure: false,                          // Define whether to throw an Error on task failure or not.
      preTaskMessage: {                               // Message displayed to the user BEFORE tasks are run.
        message: `\nValidating the Extracted TM1 Configuration...`,
        styling: `yellow`
      },
      postTaskMessage: {                              // Message displayed to the user AFTER tasks are run.
        message: ``,
        styling: ``
      },
      generatorStatusSuccess: {                       // Generator Status message used on SUCCESS.
        type:     StatusMessageType.SUCCESS,
        title:    `Validate TM1 Config`,
        message:  `Extacted TM1 configuration matches expected TM1 configuration`
      },
      generatorStatusFailure: {                       // Generator Status message used on FAILURE.
        type:     StatusMessageType.WARNING,
        title:    `Validate TM1 Config`,
        message:  `Extracted TM1 configuration does not match expected TM1 configuration`
      },
      listrObject:                                    // The Listr Tasks that will be run.
        listrTasks.validateTm1Extraction.call(this,
                                              this.tm1AnalysisReport,
                                              this.tm1ExtractFilePaths)
    };

    // Run the FIRST Task Bundle.
    await this._runListrTaskBundle(firstTaskBundle);

    // Run the SECOND Task Bundle.
    await this._runListrTaskBundle(secondTaskBundle);

    // Grab the TM1 Context Validation from Shared Data.
    this.tm1ContextValidation = this.sharedData['tm1ContextValidation'];
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      _generateReport
   * @returns     {Promise<void>}
   * @description Generates the TM1 Extraction Report (`tm1-extraction.json`)
   *              and saves it to the user's local system.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async _generateReport():Promise<void> {
    
    // Define a Task Bundle
    const taskBundle:ListrTaskBundle = {
      dbgNsLocal:     `${dbgNs}_generateReport`,      // Local Debug Namespace for this function. DO NOT add trailing : char.
      throwOnFailure: false,                          // Define whether to throw an Error on task failure or not.
      preTaskMessage: {                               // Message displayed to the user BEFORE tasks are run.
        message: `Generating TM1 Configuration Extraction Report...`,
        styling: `yellow`
      },
      postTaskMessage: {                              // Message displayed to the user AFTER tasks are run.
        message: ``,
        styling: ``
      },
      generatorStatusSuccess: {                       // Generator Status message used on SUCCESS.
        type:     StatusMessageType.SUCCESS,
        title:    `TM1 Extraction Report`,
        message:  `TM1 extraction report saved to ${this.tm1ExtractFilePaths.tm1ExtractionReportPath}`
      },
      generatorStatusFailure: {                       // Generator Status message used on FAILURE.
        type:     StatusMessageType.WARNING,
        title:    `TM1 Extraction Report`,
        message:  `WARNING - TM1 extraction report could not be created`
      },
      listrObject:                                    // The Listr Tasks that will be run.
      listrTasks.generateTm1ExtractionReport.call(this,
                                                  this.tm1AnalysisReport,
                                                  this.tm1ContextValidation,
                                                  this.tm1ExtractFilePaths)
    };

    // Run the Task Bundle.
    await this._runListrTaskBundle(taskBundle);
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      initializing
   * @returns     {Promise<void>}
   * @description STEP ONE in the Yeoman run-loop.  Uses Yeoman's "initializing"
   *              run-loop priority.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async initializing():Promise<void> {

    // Show the Yeoman to announce that the generator is running.
    this.log(yosay(this.openingMessage));
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      prompting
   * @returns     {Promise<void>}
   * @description STEP TWO in the Yeoman run-loop. Interviews the User to get
   *              information needed by the "writing" and "installing" phases.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async prompting():Promise<void> {

    // Call the default prompting() function. Replace with custom behavior if desired.
    return this._default_prompting(
      // Pre-Interview Styled Message
      {
        message:  `Starting TM1 Configuration Extraction Interview...`,
        styling:  `yellow`
      },
      // Post-Interview Styled Message
      {
        message:  ``,
        styling:  ``
      }
    );
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      configuring
   * @returns     {Promise<void>}
   * @description STEP THREE in the Yeoman run-loop. Perform any pre-install
   *              configuration steps based on the answers provided by the User.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async configuring():Promise<void> {

    // Do nothing if the Generator has been aborted.
    if (this.generatorStatus.aborted) {
      SfdxFalconDebug.msg(`${dbgNs}configuring:`, `Generator has been aborted.`);
      return;
    }

    // Get the file paths required by the TM1 Extract command.
    this.tm1ExtractFilePaths = TmFilePaths.getTm1ExtractFilePaths(this.finalAnswers.baseDirectory);

    // Attempt to load the TM1 Analysis Report
    this.tm1AnalysisReport  = await fs.readJsonMap(this.tm1ExtractFilePaths.tm1AnalysisReportPath, true)
    .catch(readJsonMapError => {
      throw new SfdxFalconError( `Required TM1 Analysis Report could not be found at ${this.tm1ExtractFilePaths.tm1AnalysisReportPath}. Aborting transformation.`
                               , `TM1AnalysisNotFound`
                               , `${dbgNs}configuring`
                               , readJsonMapError);
    }) as TM1AnalysisReport;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      writing
   * @returns     {Promise<void>}
   * @description STEP FOUR in the Yeoman run-loop. Typically, this is where
   *              you perform filesystem writes, git clone operations, etc.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async writing():Promise<void> {

    // Do nothing if the Generator has been aborted.
    if (this.generatorStatus.aborted) {
      SfdxFalconDebug.msg(`${dbgNs}writing:`, `Generator has been aborted.`);
      return;
    }

    // Extract TM1 config from the Target Org.
    await this._extractTm1Config();

    // Generate the TM1 extraction report.
    await this._generateReport();
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      install
   * @returns     {Promise<void>}
   * @description STEP FIVE in the Yeoman run-loop. Typically, this is where
   *              you perform operations that must happen AFTER files are
   *              written to disk. For example, if the "writing" step downloaded
   *              an app to install, the "install" step would run the
   *              installation.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async install():Promise<void> {

    // Call the default install() function. Replace with custom behavior if desired.
    return this._default_install();
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      end
   * @returns     {Promise<void>}
   * @description STEP SIX in the Yeoman run-loop. This is the FINAL step that
   *              Yeoman runs and it gives us a chance to do any post-Yeoman
   *              updates and/or cleanup.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async end():Promise<void> {

    // Call the default end() function. Replace with custom behavior if desired.
    return this._default_end();
  }
}
