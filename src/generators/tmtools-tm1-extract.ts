//─────────────────────────────────────────────────────────────────────────────────────────────────┐
/**
 * @file          generators/tmtools-tm1-extract.ts
 * @copyright     Vivek M. Chawla - 2019
 * @author        Vivek M. Chawla <@VivekMChawla>
 * @summary       Yeoman Generator for extracting TM1 metadata and data from an org.
 * @description   Salesforce CLI Plugin command (tmtools:tm1:extract) that allows a Salesforce
 *                Administrator to extract Territory Management (TM1) metadata and data from an
 *                org that they have connected their Salesforce CLI to. Extracted files are saved
 *                locally in a format that can be fed to the tmtools:tm1:transform command.
 * @version       1.0.0
 * @license       MIT
 */
//─────────────────────────────────────────────────────────────────────────────────────────────────┘
// Import External Libraries & Modules
import chalk      from  'chalk';  // Helps write colored text to the console.
import * as path  from  'path';   // Library. Helps resolve local paths at runtime.

// Import Internal Libraries
import * as iq                          from  '../modules/sfdx-falcon-util/interview-questions';  // Library. Helper functions that create Interview Questions.
import * as listrTasks                  from  '../modules/sfdx-falcon-util/listr-tasks';          // Library. Helper functions that make using Listr with SFDX-Falcon easier.

// Import Internal Classes & Functions
import {SfdxFalconDebug}                from  '../modules/sfdx-falcon-debug';                     // Class. Provides custom "debugging" services (ie. debug-style info to console.log()).
import {SfdxFalconError}                from  '../modules/sfdx-falcon-error';                     // Class. Extends SfdxError to provide specialized error structures for SFDX-Falcon modules.
import {SfdxFalconInterview}            from  '../modules/sfdx-falcon-interview';                 // Class. Provides a standard way of building a multi-group Interview to collect user input.
import {SfdxFalconResult}               from  '../modules/sfdx-falcon-result';                    // Class. Framework for creating results-driven, informational objects with a concept of heredity (child results).
import {SfdxFalconKeyValueTableDataRow} from  '../modules/sfdx-falcon-util/ux';                   // Interface. Represents a row of data in an SFDX-Falcon data table.
import {SfdxFalconTableData}            from  '../modules/sfdx-falcon-util/ux';                   // Interface. Represents and array of SfdxFalconKeyValueTableDataRow objects.
import {GeneratorOptions}               from  '../modules/sfdx-falcon-yeoman-command';            // Interface. Represents options used by SFDX-Falcon Yeoman generators.
import {SfdxFalconYeomanGenerator}      from  '../modules/sfdx-falcon-yeoman-generator';          // Class. Abstract base class class for building Yeoman Generators for SFDX-Falcon commands.

// Import TM-Tools Types
import {TM1AnalysisReport}              from  '../modules/tm-tools-types';                        // Interface. Represents the data that is generated by a TM1 Analysis Report.

// Requires
const yosay = require('yosay');   // ASCII art creator brings Yeoman to life.

// Set the File Local Debug Namespace
const dbgNs = 'GENERATOR:tmtools-tm1-extract:';
SfdxFalconDebug.msg(`${dbgNs}`, `Debugging initialized for ${dbgNs}`);


//─────────────────────────────────────────────────────────────────────────────────────────────────┐
/**
 * @interface   InterviewAnswers
 * @description Represents answers to the questions asked in the Yeoman interview.
 */
//─────────────────────────────────────────────────────────────────────────────────────────────────┘
interface InterviewAnswers {
  analysisDirectory:  string;
}

//─────────────────────────────────────────────────────────────────────────────────────────────────┐
/**
 * @class       Tm1Extract
 * @extends     SfdxFalconYeomanGenerator
 * @summary     Yeoman generator class. Extracts TM1 configuration (data+metadata) from target org.
 * @description Uses Yeoman to run the user through an interview, then extracts TM1 configuration
 *              data and metadata from the target org specified by the user's tm1-analysis.json file.
 * @public
 */
//─────────────────────────────────────────────────────────────────────────────────────────────────┘
export default class Tm1Extract extends SfdxFalconYeomanGenerator<InterviewAnswers> {

  // Define class members specific to this Generator.
  protected extractedDataDir:           string;             // Fully qualified path to location where extracted source DATA (ie. CSV files) will be stored.
  protected extractedMetadataDir:       string;             // Fully qualified path to location where extracted source METADATA (ie. package manifest and other XML) will be stored.
  protected tm1AnalysisFilePath:        string;             // Complete path to the tm1-analysis.json file that will drive this extraction.
  protected tm1AnalysisReport:          TM1AnalysisReport;  // Report data created by a previously executed TM1 Analysis.
  protected tm1ExtractionFilePath:      string;             // Complete path to the tm1-extraction.json file that will be created

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @constructs  Tm1Extract
   * @param       {string|string[]} args Required. Not used (as far as I know).
   * @param       {GeneratorOptions}  opts Required. Sets generator options.
   * @description Constructs a Tm1Extract object.
   * @public
   */
  //───────────────────────────────────────────────────────────────────────────┘
  constructor(args:string|string[], opts:GeneratorOptions) {

    // Call the parent constructor to initialize the Yeoman Generator.
    super(args, opts);

    // Initialize the "Confirmation Question".
    this.confirmationQuestion = 'Extract TM1 configuration using the above settings?';

    // Initialize member variables.
    this.extractedDataDir       = '';
    this.extractedMetadataDir   = '';
    this.tm1AnalysisFilePath    = '';
    this.tm1AnalysisReport      = null;
    this.tm1ExtractionFilePath  = '';

    // Initialize DEFAULT Interview Answers.
    this.defaultAnswers.analysisDirectory = path.resolve(opts.sourceDir as string);

    // Initialize Shared Data.
    this.sharedData['cliCommandName']     = this.cliCommandName;  // ???
    this.sharedData['tm1AnalysisReport']  = {};                   // ???
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      _buildInterview
   * @returns     {SfdxFalconInterview<InterviewAnswers>} Returns a fully fleshed
   *              SfdxFalconInterview object with zero or more prompts that the
   *              user will answer in an interview once this is run.
   * @description Allows the developer to build a complex, multi-step interview
   *              that Yeoman will execute during the "prompting" phase.
   * @protected
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected _buildInterview():SfdxFalconInterview<InterviewAnswers> {

    // Initialize the Interview object.
    const interview = new SfdxFalconInterview<InterviewAnswers>({
      defaultAnswers:     this.defaultAnswers,
      confirmation:       iq.confirmProceedRestart,
      confirmationHeader: chalk.yellow('Review Your Settings:'),
      display:            this._buildInterviewAnswersTableData,
      context:            this,
      sharedData:         this.sharedData
    });

    // Group 0: Specify the directory containing the TM1 org analysis.
    interview.createGroup({
      title:        chalk.yellow('\nTM1 Analysis Directory:'),
      questions:    iq.provideTm1AnalysisDirectory
    });

    // Finished building the Interview.
    return interview;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      _buildInterviewAnswersTableData
   * @param       {InterviewAnswers}  userAnswers Required.
   * @returns     {Promise<SfdxFalconTableData>}
   * @description Builds an SfdxFalconTableData object based on the Interview
   *              Answer values provided by the caller. This function can be
   *              used by an SfdxFalconInterview to reflect input to the user
   *              at the end of an Interview.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async _buildInterviewAnswersTableData(interviewAnswers:InterviewAnswers):Promise<SfdxFalconTableData> {

    // Declare an array of Falcon Table Data Rows
    const tableData = new Array<SfdxFalconKeyValueTableDataRow>();

    // Grab the TM1 Analysis from Shared Data, then extract the key Org Info settings from it.
    const tm1AnalysisReport   = this.sharedData['tm1AnalysisReport'] as TM1AnalysisReport;
    const orgId               = tm1AnalysisReport.orgInfo.orgId;
    const username            = tm1AnalysisReport.orgInfo.username;
    const loginUrl            = tm1AnalysisReport.orgInfo.loginUrl;
    const createdOrgInstance  = tm1AnalysisReport.orgInfo.createdOrgInstance;

    // User-supplied answer.
    tableData.push({option:'TM1 Analysis Directory:', value:`${interviewAnswers.analysisDirectory}`});

    // Answers read from the specified tm1-analysis.json file.
    tableData.push({option:'Username:',     value:`${username}`});
    tableData.push({option:'Org ID:',       value:`${orgId}`});
    tableData.push({option:'Login Url:',    value:`${loginUrl}`});
    tableData.push({option:'Org Instance:', value:`${createdOrgInstance}`});

    // Return the Falcon Table Data.
    return tableData;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      _extractTm1Config
   * @returns     {Promise<void>}
   * @description Uses information from the User's "Final Answers" to do a
   *              MDAPI/SOQL retrievals of all TM1 metadata and data from
   *              the Target Org indicated by the Final Answers.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async _extractTm1Config():Promise<void> {

    // Define tasks for fetching the packaged metadata.
    const extractTm1Config =
      listrTasks.extractTm1Config.call(this,
                                       this.tm1AnalysisReport,
                                       this.extractedMetadataDir,
                                       this.extractedDataDir);

    // Show a message to the User letting them know we're going to start these tasks.
    console.log(chalk`{yellow Extracting TM1 Configuration From the Target Org...}`);
    
    // Run the "Fetch and Convert Package" tasks. Make sure to use await since Listr will run asynchronously.
    const tm1ExtractionResults = await extractTm1Config.run()
    .then(listrResult => {
      SfdxFalconDebug.obj(`${dbgNs}_extractTm1Config:extraction:listrResult:`, listrResult);

      // Add a success message
      this.generatorStatus.addMessage({
        type:     'success',
        title:    `Extract TM1 Config`,
        message:  `Success - TM1 configuration successfully extracted from Salesforce`
      });
      return listrResult;
    })
    .catch(utilityResult => {
      SfdxFalconDebug.obj(`${dbgNs}_extractTm1Config:extraction:utilityResult:`, utilityResult);

      // TM1 config extraction failed. Mark the request as ABORTED.
      this.generatorStatus.abort({
        type:     'error',
        title:    `Extract TM1 Config`,
        message:  `Error - Could not extract TM1 config from Salesforce`
      });

      // If we get an Error, just throw it.
      if (utilityResult instanceof Error) {
        throw utilityResult;
      }

      // If we get an SfdxFalconResult, link its Error Object to a new SfdxFalconError and throw it.
      if (utilityResult instanceof SfdxFalconResult) {
        throw new SfdxFalconError( `Extraction of TM1 configuration via the user '${this.tm1AnalysisReport.orgInfo.username}' failed.`
                                  , `Tm1ExtractionError`
                                  , `${dbgNs}:_extractTm1Config:extraction`
                                  , utilityResult.errObj);
      }

      // If we get here, who knows what we got. Wrap it as an SfdxFalconError and throw it.
      throw SfdxFalconError.wrap(utilityResult);
    });

    // DEBUG
    SfdxFalconDebug.obj(`${dbgNs}_extractTm1Config:tm1ExtractionResults:`, tm1ExtractionResults);

    // Define Listr tasks for validating the extracted TM1 config.
    const tm1ExtractionValidation =
      listrTasks.validateTm1Extraction.call(this,
                                            this.tm1AnalysisReport,
                                            this.extractedMetadataDir,
                                            this.extractedDataDir,
                                            this.tm1ExtractionFilePath);

    // Show a message to the User letting them know we're going to start these tasks.
    console.log(chalk`{yellow \nValidating the Extracted TM1 Configuration...}`);
    
    // Run the "TM1 Extraction Validation" tasks. Make sure to use await since Listr will run asynchronously.
    const tm1ExtractionValidationResults = await tm1ExtractionValidation.run()
    .then(listrResult => {
      SfdxFalconDebug.obj(`${dbgNs}_extractTm1Config:validation:listrResult:`, listrResult);

      // Add a success message
      this.generatorStatus.addMessage({
        type:     'success',
        title:    `Validate TM1 Config`,
        message:  `Success - Extacted TM1 configuration matches expected TM1 configuration`
      });
      return listrResult;
    })
    .catch(listrError => {
      SfdxFalconDebug.obj(`${dbgNs}_extractTm1Config:validation:listrError:`, listrError);

      // Add a warning message
      this.generatorStatus.addMessage({
        type:     'warning',
        title:    `Validate TM1 Config`,
        message:  `Warning - Extracted TM1 configuration does not match expected TM1 configuration`
      });

      // Since the TM1 Extraction Validation tasks DO NOT exit on error, we need to process the results.
      if (typeof listrError === 'object' && Array.isArray(listrError.errors)) {
        const caughtErrors = [];
        for (const error of listrError.errors) {
          caughtErrors.push({
            name:     error.name,
            message:  error.message,
            cause:    (error.cause) ? {name: error.cause.name, message: error.cause.message, stack: error.cause.stack} : 'NOT_SPECIFIED'
          });
        }
        SfdxFalconDebug.obj(`${dbgNs}_extractTm1Config:validation:caughtErrors:`, caughtErrors);
      }
    });

    // DEBUG
    SfdxFalconDebug.obj(`${dbgNs}_extractTm1Config:tm1ExtractionValidationResults:`, tm1ExtractionValidationResults);

    // Add a line break to separate the output of this section from others
    console.log('');
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      initializing
   * @returns     {Promise<void>}
   * @description STEP ONE in the Yeoman run-loop.  Uses Yeoman's "initializing"
   *              run-loop priority.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async initializing():Promise<void> {

    // Show the Yeoman to announce that the generator is running.
    this.log(yosay(this.openingMessage));
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      prompting
   * @returns     {Promise<void>}
   * @description STEP TWO in the Yeoman run-loop. Interviews the User to get
   *              information needed by the "writing" and "installing" phases.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async prompting():Promise<void> {

    // Let the User know that the Interview is starting.
    console.log(chalk`{yellow Starting TM1 config extraction interview...}`);

    // Call the default prompting() function. Replace with custom behavior if desired.
    return this._default_prompting();
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      configuring
   * @returns     {Promise<void>}
   * @description STEP THREE in the Yeoman run-loop. Perform any pre-install
   *              configuration steps based on the answers provided by the User.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async configuring():Promise<void> {

    // Call the default configuring() function. Replace with custom behavior if desired.
    return this._default_configuring();
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      writing
   * @returns     {Promise<void>}
   * @description STEP FOUR in the Yeoman run-loop. Typically, this is where
   *              you perform filesystem writes, git clone operations, etc.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async writing():Promise<void> {

    // Check if we need to abort the Yeoman interview/installation process.
    if (this.generatorStatus.aborted) {
      SfdxFalconDebug.msg(`${dbgNs}writing:`, `generatorStatus.aborted found as TRUE inside writing()`);
      return;
    }

    // Define paths for all Target directories and files.
    this.tm1AnalysisFilePath    = path.join(this.finalAnswers.analysisDirectory,  'tm1-analysis.json');
    this.tm1ExtractionFilePath  = path.join(this.finalAnswers.analysisDirectory,  'tm1-extraction.json');
    this.extractedDataDir       = path.join(this.finalAnswers.analysisDirectory,  'tm1-extraction', 'extracted-data');
    this.extractedMetadataDir   = path.join(this.finalAnswers.analysisDirectory,  'tm1-extraction', 'extracted-metadata');

    // Save the TM1 Analysis that surfaced during the interview to a member variable.
    this.tm1AnalysisReport = this.sharedData['tm1AnalysisReport'] as TM1AnalysisReport;

    // Extract TM1 config from the Target Org.
    await this._extractTm1Config();

    // Done with writing()
    return;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      install
   * @returns     {Promise<void>}
   * @description STEP FIVE in the Yeoman run-loop. Typically, this is where
   *              you perform operations that must happen AFTER files are
   *              written to disk. For example, if the "writing" step downloaded
   *              an app to install, the "install" step would run the
   *              installation.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async install():Promise<void> {

    // Call the default install() function. Replace with custom behavior if desired.
    return this._default_install();
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      end
   * @returns     {Promise<void>}
   * @description STEP SIX in the Yeoman run-loop. This is the FINAL step that
   *              Yeoman runs and it gives us a chance to do any post-Yeoman
   *              updates and/or cleanup.
   * @protected @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  protected async end():Promise<void> {

    // Call the default end() function. Replace with custom behavior if desired.
    return this._default_end();
  }
}
