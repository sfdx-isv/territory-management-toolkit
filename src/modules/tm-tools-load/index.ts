//─────────────────────────────────────────────────────────────────────────────────────────────────┐
/**
 * @file          modules/tm-tools-load/index.ts
 * @copyright     Vivek M. Chawla / Salesforce - 2019
 * @author        Vivek M. Chawla <@VivekMChawla>
 * @summary       Exports the TmToolsLoad class. Lets the user perform the FINAL TM2 metadata/data
 *                loading services given a successful TM2 Deploy.
 * @description   Exports the TmToolsLoad class. Lets the user perform the FINAL TM2 metadata/data
 *                loading services given a successful TM2 Deploy.
 * @version       1.0.0
 * @license       MIT
 */
//─────────────────────────────────────────────────────────────────────────────────────────────────┘
// Import External Libraries & Modules
import  {fs}                              from  '@salesforce/core'; // File System utility from the Core SFDX library.
//import  {cloneDeep}                       from  'lodash';           // Useful function for detecting empty objects.
//import  * as path                         from  'path';             // Node's path library.

// Import Internal Libraries
import * as sfdxHelper          from  '../sfdx-falcon-util/sfdx';                 // Library of SFDX Helper functions specific to SFDX-Falcon.
import * as typeValidator       from  '../sfdx-falcon-validators/type-validator'; // Library of SFDX Helper functions specific to SFDX-Falcon.
//import * as zipHelper           from  './zip';                                    // Library of Zip Helper functions.

// Import Internal Classes & Functions
import  {SfdxFalconDebug}                 from  '../sfdx-falcon-debug';   // Specialized debug provider for SFDX-Falcon code.
import  {SfdxFalconError}                 from  '../sfdx-falcon-error';   // Class. Extends SfdxError to provide specialized error structures for SFDX-Falcon modules.
import  {SfdxFalconResult}                from  '../sfdx-falcon-result';  // Class. Implements a framework for creating results-driven, informational objects with a concept of heredity (child results) and the ability to "bubble up" both Errors (thrown exceptions) and application-defined "failures".

// Import TM-Tools Types
import  {DeploymentResult}                from  '../tm-tools-types';    // Type. Represents the JSON returned by a call to force:mdapi:deploy
import  {Status}                          from  '../tm-tools-types';    // Enum. Represents the valid set of Status values that help determine state in the TM-Tools environment.
import  {Territory2ModelRecord}           from  '../tm-tools-types';    // Interface. Represents a Territory2Model Record.
import  {TM1AnalysisReport}               from  '../tm-tools-types';    // Interface. Represents the data that is generated by a TM1 Analysis Report.
import  {TM1ExtractionReport}             from  '../tm-tools-types';    // Interface. Represents the data that is generated by a TM1 Extraction Report.
import  {TM1TransformationReport}         from  '../tm-tools-types';    // Interface. Represents the data that is generated by a TM1 Transformation Report.
import  {TM2DeploymentReport}             from  '../tm-tools-types';    // Interface. Represents the data that is generated by a TM2 Deployment Report.
import  {TM2DataLoadReport}               from  '../tm-tools-types';    // Interface. Represents the data that is generated by a TM2 DataLoad Report.
import  {TM2DataLoadFilePaths}            from  '../tm-tools-types';    // Interface. Represents the complete suite of file paths required by the TM2 DataLoad command.

// Set file local globals
const territory2ModelDevName  = 'Imported_Territory';
const {falcon}                = require('../../../package.json');       // The custom "falcon" key from package.json. This holds custom project-level values.

// Set the File Local Debug Namespace
const dbgNs = 'MODULE:tm-tools-load:';
SfdxFalconDebug.msg(`${dbgNs}`, `Debugging initialized for ${dbgNs}`);


//─────────────────────────────────────────────────────────────────────────────────────────────────┐
/**
 * @class       TmToolsLoad
 * @summary     Provides FINAL TM2 metadata/data loading services given a successful TM2 Deploy
 * @description If provided with the location of FINAL transformed data/metadata, as well as a
 *              deployed AND activated Territory2 model, enables the final metadata deployment and
 *              data loading steps needed to complete a TM1 to TM2 migration.
 * @public
 */
//─────────────────────────────────────────────────────────────────────────────────────────────────┘
export class TmToolsLoad {

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      prepare
   * @param       {TM1AnalysisReport} tm1AnalysisReport Required.
   * @param       {TM1ExtractionReport} tm1ExtractionReport Required.
   * @param       {TM1TransformationReport} tm1TransformationReport Required.
   * @param       {TM2DeploymentReport} tm2DeploymentReport Required.
   * @param       {TM2DataLoadFilePaths}  tm2DataLoadFilePaths  Required.
   * @description Given reports for all TM-Tools commands that should have been
   *              executed before a DataLoad, and the set of TM2 Data Load file
   *              paths, prepares a TmToolsLoad object which can be used to
   *              perform the FINAL deployment and data load.
   * @public @static @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public static async prepare(tm1AnalysisReport:TM1AnalysisReport,
                              tm1ExtractionReport:TM1ExtractionReport,
                              tm1TransformationReport:TM1TransformationReport,
                              tm2DeploymentReport:TM2DeploymentReport,
                              tm2DataLoadFilePaths:TM2DataLoadFilePaths):Promise<TmToolsLoad> {

    // Debug incoming arguments
    SfdxFalconDebug.obj(`${dbgNs}prepare:arguments:`, arguments);

    // Define a query to find a Territory2 Model with the Developer Name used by TM-Tools.
    const soqlQuery = `SELECT Id,Name,DeveloperName,State,ActivatedDate,DeactivatedDate,LastModifiedById,LastModifiedDate FROM Territory2Model WHERE DeveloperName='${territory2ModelDevName}'`;

    // Query the org specified in the TM2 Deployment Report for the expected Territory2 Model.
    const queryResults:Territory2ModelRecord[] = await sfdxHelper.executeSoqlQuery(
      tm2DeploymentReport.orgInfo.username,
      soqlQuery,
      {
        apiVersion:     falcon.sfdcApiVersion,
        logLevel:       'warn',
        useToolingApi:  false,
        perfLog:        false,
        json:           true
      }
    )
    .then((successResult:SfdxFalconResult) => {
      SfdxFalconDebug.obj(`${dbgNs}prepare:successResult:`, successResult);
      return sfdxHelper.getRecordsFromResult(successResult);
    })
    .catch((failureResult:SfdxFalconResult|Error) => {
      SfdxFalconDebug.obj(`${dbgNs}prepare:failureResult:`, failureResult);
      if (failureResult instanceof SfdxFalconResult) {
        // Add additional context and repackage the Error contained by the SfdxFalconResult
        throw failureResult.error(
          new SfdxFalconError ( `The state of the Territory2 Model '${territory2ModelDevName}' in target org (${tm2DeploymentReport.orgInfo.username}) could not be determined.`
                              , `TM2ModelStateUnknown`
                              , `${dbgNs}prepare`
                              ,  failureResult.errObj)
        );
      }
      else {
        throw failureResult;
      }
    });
    SfdxFalconDebug.debugObject(`${dbgNs}prepare:queryResults:`, queryResults);

    // Inspect the Query Results to see if the State is "Active". Anything else is NOT acceptable.
    if (typeValidator.isEmptyNullInvalidArray(queryResults)
        || queryResults.length !== 1
        || queryResults[0].State !== 'Active') {

      throw new SfdxFalconError ( `Territory2 Model '${territory2ModelDevName}' in target org (${tm2DeploymentReport.orgInfo.username}) is not Active. `
                                + (queryResults[0].State ? `The model's current state is '${queryResults[0].State}'.` : ``)
                                , `TM2ModelStateInvalid`
                                , `${dbgNs}prepare`);
    }

    // Build a TM Tools Load object.
    const tmToolsLoad = new TmToolsLoad(tm1AnalysisReport,
                                        tm1ExtractionReport,
                                        tm1TransformationReport,
                                        tm2DeploymentReport,
                                        tm2DataLoadFilePaths);

    // Mark the instantiated obeject as "prepared".
    tmToolsLoad._prepared = true;

    // Return the instantiated TM Tools Transform object.
    return tmToolsLoad;
  }

  // Private Members
  private _tm1AnalysisReport:             TM1AnalysisReport;
  private _tm1ExtractionReport:           TM1ExtractionReport;
  private _tm1TransformationReport:       TM1TransformationReport;
  private _tm2DeploymentReport:           TM2DeploymentReport;
  private _tm2DataLoadReport:             TM2DataLoadReport;
  private _sharingRulesDeploymentResult:  DeploymentResult;
  private _userT2ABulkJobId:              string;
  private _objectT2ABulkJobId:            string;
  private _filePaths:                     TM2DataLoadFilePaths;
  private _prepared:                      boolean;

  // Public Accessors
  public get tm1AnalysisReport()              { return this.isPrepared()  ? this._tm1AnalysisReport             : undefined; }
  public get tm1ExtractionReport()            { return this.isPrepared()  ? this._tm1ExtractionReport           : undefined; }
  public get tm1TransformationReport()        { return this.isPrepared()  ? this._tm1TransformationReport       : undefined; }
  public get tm2DeploymentReport()            { return this.isPrepared()  ? this._tm2DeploymentReport           : undefined; }
  public get tm2DataLoadReport()              { return this.isPrepared()  ? this._tm2DataLoadReport             : undefined; }
  public get sharingRulesDeploymentResult()   { return this.isPrepared()  ? this._sharingRulesDeploymentResult  : undefined; }
  public get userT2ABulkJobId()               { return this.isPrepared()  ? this._userT2ABulkJobId              : undefined; }
  public get objectT2ABulkJobId()             { return this.isPrepared()  ? this._objectT2ABulkJobId            : undefined; }
  public get filePaths()                      { return this._filePaths; }
  public get prepared()                       { return this._prepared; }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @constructs  TmToolsTransform
   * @param       {TM1AnalysisReport} tm1AnalysisReport Required.
   * @param       {TM1ExtractionReport} tm1ExtractionReport Required.
   * @param       {TM1TransformationReport} tm1TransformationReport Required.
   * @param       {TM2DeploymentReport} tm2DeploymentReport Required.
   * @param       {TM2DataLoadFilePaths}  tm2DataLoadFilePaths  Required.
   * @description Takes a reports from all previous TM-Tools commands.  After
   *              construction, the object should be ready to perform the FINAL
   *              TM2 deployment/data load.
   * @private
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private constructor(tm1AnalysisReport:TM1AnalysisReport,
                      tm1ExtractionReport:TM1ExtractionReport,
                      tm1TransformationReport:TM1TransformationReport,
                      tm2DeploymentReport:TM2DeploymentReport,
                      tm2DataLoadFilePaths:TM2DataLoadFilePaths) {

    // Save the various Reports.
    this._tm1AnalysisReport       = tm1AnalysisReport;
    this._tm1ExtractionReport     = tm1ExtractionReport;
    this._tm1TransformationReport = tm1TransformationReport;
    this._tm2DeploymentReport     = tm2DeploymentReport;

    // Define the expected file paths.
    this._filePaths = tm2DataLoadFilePaths;

    // Mark this object instance as UNPREPARED.
    this._prepared = false;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      deploySharingRules
   * @return      {Promise<DeploymentResult>}
   * @description Deploys all Sharing Rules metadata to the TM2 org.
   * @public @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public async deploySharingRules():Promise<DeploymentResult> {

    // Do the deployment.
    await sfdxHelper.deployMetadata(this._tm2DeploymentReport.orgInfo.username, this._filePaths.tm2SharingRulesDeploymentDir)
    .then(successResult => {
      SfdxFalconDebug.obj(`${dbgNs}deploySharingRules:successResult:`, successResult);
      this._sharingRulesDeploymentResult = successResult.detail['stdOutParsed']['result'] as DeploymentResult;
    })
    .catch(errorResult => {
      SfdxFalconDebug.obj(`${dbgNs}deploySharingRules:errorResult:`, errorResult);
      throw errorResult;
    });

    // Send the results back to the caller.
    SfdxFalconDebug.obj(`${dbgNs}deploySharingRules:_sharingRulesDeploymentResult:`, this._sharingRulesDeploymentResult);
    return this._sharingRulesDeploymentResult;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      generateReport
   * @return      {TM2DataLoadReport} Builds a complete JSON representation
   *              of the aftermath of a TM2 Data Load.
   * @description ???
   * @public
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public generateReport():TM2DataLoadReport {
    const tm2DataLoadReport:TM2DataLoadReport = {
      orgInfo: this._tm2DeploymentReport.orgInfo,
      status:   {
        userTerritory2Association: {
          dataSource: this._filePaths.userTerritory2AssociationCsv,
          status:     Status.PENDING,
          jobId:      this._userT2ABulkJobId
        },
        objectTerritory2Association: {
          dataSource: this._filePaths.objectTerritory2AssociationCsv,
          status:     Status.PENDING,
          jobId:      this._userT2ABulkJobId
        },
        sharingRules: this._sharingRulesDeploymentResult
      }
    };
    SfdxFalconDebug.obj(`${dbgNs}generateReport:tm2DataLoadReport:`, tm2DataLoadReport);
    return tm2DataLoadReport;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      loadObjectTerritory2Associations
   * @return      {Promise<string>}
   * @description Queues up a Bulk API v2 data load for the UserTerritory2Association
   *              data that was previously transformed during the post-deploy
   *              steps from tmtools:tm2:deploy.
   * @public @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public async loadObjectTerritory2Associations():Promise<string> {

    // TODO: Implement
    return null;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      loadUserTerritory2Associations
   * @return      {Promise<string>}
   * @description Queues up a Bulk API v2 data load for the UserTerritory2Association
   *              data that was previously transformed during the post-deploy
   *              steps from tmtools:tm2:deploy.
   * @public @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public async loadUserTerritory2Associations():Promise<string> {

    // TODO: Implement
    return null;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      saveReport
   * @param       {string}  [targetFile] Optional.
   * @return      {Promise<TM2DataLoadReport>}
   * @description Generates a TM2 Data Load Report and writes it to the
   *              local filesystem at the default TM File path, or to the
   *              filepath specified by the caller.
   * @public @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public async saveReport(targetFile?:string):Promise<TM2DataLoadReport> {

    // Debug incoming arguments.
    SfdxFalconDebug.obj(`${dbgNs}saveReport:arguments:`, arguments);

    // Default target file to the one from the TM File Paths collection unless the caller overrides.
    targetFile = targetFile || this.filePaths.tm2DataLoadReportPath;

    // Validate the target file.
    if (typeof targetFile !== 'string' || targetFile === '' || targetFile === null) {
      throw new SfdxFalconError ( `Expected targetFile to be a non-empty, non-null string${typeof targetFile !== 'string' ? ` but got '${typeof targetFile}' instead.` : `.`}`
                                , `TypeError`
                                , `${dbgNs}save`);
    }
    if (targetFile.endsWith('.json') !== true) {
      throw new SfdxFalconError ( `The targetFile must end with the '.json' extension. The path/file '${targetFile}' is invalid.`
                                , `InvalidFileName`
                                , `${dbgNs}save`);
    }

    // Generate the report.
    const tm2DataLoadReport = this.generateReport();
    SfdxFalconDebug.obj(`${dbgNs}saveReport:tm2DataLoadReport:`, tm2DataLoadReport);

    // Write the report to the local filesystem.
    await fs.writeJson(targetFile, tm2DataLoadReport);

    // Send the report back to the caller.
    return tm2DataLoadReport;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      isPrepared
   * @return      {boolean}
   * @description Returns true if an object instance is prepared. Throws an
   *              error otherwise.
   * @private
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private isPrepared():boolean {
    if (this._prepared !== true) {
      throw new SfdxFalconError ( `Operations against TmToolsLoad objects are not available until the instance is prepared`
                                , `ObjectNotPrepared`
                                , `${dbgNs}isPrepared`);
    }
    else {
      return this._prepared;
    }
  }
}
