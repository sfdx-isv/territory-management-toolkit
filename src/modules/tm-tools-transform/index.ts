//─────────────────────────────────────────────────────────────────────────────────────────────────┐
/**
 * @file          modules/tm-tools-transform/index.ts
 * @copyright     Vivek M. Chawla - 2019
 * @author        Vivek M. Chawla <@VivekMChawla>
 * @summary       Exports the Transform class. Lets user take a TM1 Context and build TM2 metadata.
 * @description   Exports the Transform class. Lets user take a TM1 Context and build TM2 metadata.
 * @version       1.0.0
 * @license       MIT
 */
//─────────────────────────────────────────────────────────────────────────────────────────────────┘
// Import External Libraries & Modules
import * as path                          from  'path';                                 // Node's path library.

// Import Internal Classes & Functions
import  {SfdxFalconDebug}                 from  '../sfdx-falcon-debug';                     // Specialized debug provider for SFDX-Falcon code.
import  {SfdxFalconError}                 from  '../sfdx-falcon-error';                     // Class. Extends SfdxError to provide specialized error structures for SFDX-Falcon modules.
import  {DestructiveChanges}              from  '../tm-tools-objects/destructive-changes';  // ???
import  {Package}                         from  '../tm-tools-objects/package';              // ???
import  {Territory2}                      from  '../tm-tools-objects/territory2';           // ???
import  {Territory2Model}                 from  '../tm-tools-objects/territory2-model';     // ???
import  {Territory2Rule}                  from  '../tm-tools-objects/territory2-rule';      // ???
import  {Territory2Type}                  from  '../tm-tools-objects/territory2-type';      // ???
import  {Tm1Context}                      from  '../tm-tools-objects/tm1-context';          // Models the entirety of an exported set of TM1 data, including helpful transforms.

// Import TM-Tools Types
import  {Territory2ObjectsByDevName}      from  '../tm-tools-types';   // Type. Represents a map of Territory2 Objects by Developer Name.
import  {Territory2ModelObjectsByDevName} from  '../tm-tools-types';   // Type. Represents a map of Territory2Model Objects by Developer Name.
import  {Territory2RuleObjectsByDevName}  from  '../tm-tools-types';   // Type. Represents a map of Territory2Rule Objects by Developer Name.
import  {Territory2TypeObjectsByDevName}  from  '../tm-tools-types';   // Type. Represents a map of Territory2Type Objects by Developer Name.
import  {TM1AnalysisReport}               from  '../tm-tools-types';   // Interface. Represents the data that is generated by a TM1 Analysis Report.
import  {TM1ExtractionReport}             from  '../tm-tools-types';   // Interface. Represents the data that is generated by a TM1 Extraction Report.
import  {TM1TransformationReport}         from  '../tm-tools-types';   // Interface. Represents the data that is generated by a TM1 Transformation Report.
import  {TM1TransformFilePaths}           from  '../tm-tools-types';   // Interface. Represents the complete suite of file paths required by the TM1 Transform command.

// Set file local globals
const territory2ModelDevName  = 'Imported_Territory';
const territory2TypeDevName   = 'Imported_Territory';

// Set the File Local Debug Namespace
const dbgNs = 'MODULE:tm-tools-transform:';
SfdxFalconDebug.msg(`${dbgNs}`, `Debugging initialized for ${dbgNs}`);


//─────────────────────────────────────────────────────────────────────────────────────────────────┐
/**
 * @class       TmToolsTransform
 * @summary     Provides TM1 to TM2 transformation services given the location of source config.
 * @description If provided with the location of TM1 metadata and TM1 data, as well as the location
 *              on disk where the transformed config (data+metadata) should go, provides the full
 *              set of transformation services.
 * @public
 */
//─────────────────────────────────────────────────────────────────────────────────────────────────┘
export class TmToolsTransform {

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      prepare
   * @param       {TM1AnalysisReport} tm1AnalysisReport Required.
   * @param       {TM1ExtractionReport} tm1ExtractionReport Required.
   * @param       {TM1TransformFilePaths} tm1TransformFilePaths  Required.
   * @description Given the paths to exported TM1 metadata and record data,
   *              prepares a "Territory Management 1.0 Context" and makes ready
   *              to perform the actual transformation.
   * @public @static @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public static async prepare(tm1AnalysisReport:TM1AnalysisReport, tm1ExtractionReport:TM1ExtractionReport, tm1TransformFilePaths:TM1TransformFilePaths):Promise<TmToolsTransform> {

    // Debug incoming arguments
    SfdxFalconDebug.obj(`${dbgNs}prepare:arguments:`, arguments);

    // Create a TM1 Context.
    const tm1Context  = await Tm1Context.prepare(tm1AnalysisReport, tm1TransformFilePaths.extractedMetadataDir, tm1TransformFilePaths.extractedDataDir);
    SfdxFalconDebug.obj(`${dbgNs}prepare:tm1Context:`, tm1Context);

    // Build a TM Tools Transform object.
    const tmToolsTransform = new TmToolsTransform(tm1Context, tm1ExtractionReport, tm1TransformFilePaths);

    // Mark the instantiated obeject as "prepared".
    tmToolsTransform._prepared = true;

    // Return the instantiated TM Tools Transform object.
    return tmToolsTransform;
  }

  // Private Members
  private _tm1Context:                      Tm1Context;
  private _tm1ExtractionReport:             TM1ExtractionReport;
  private _mainPackage:                     Package;
  private _sharingRulesPackage:             Package;
  private _cleanupPackage:                  Package;
  private _destructiveChanges:              DestructiveChanges;
  private _territory2ObjectsByDevName:      Territory2ObjectsByDevName;
  private _territory2ModelObjectsByDevName: Territory2ModelObjectsByDevName;
  private _territory2TypeObjectsByDevName:  Territory2TypeObjectsByDevName;
  private _territory2RuleObjectsByDevName:  Territory2RuleObjectsByDevName;
  private _filePaths:                       TM1TransformFilePaths;
  private _prepared:                        boolean;

  // Public Accessors
  public get tm1Context()                       { return this.isPrepared()  ? this._tm1Context                      : undefined; }
  public get tm1ExtractionReport()              { return this.isPrepared()  ? this._tm1ExtractionReport             : undefined; }
  public get mainPackage()                      { return this.isPrepared()  ? this._mainPackage                     : undefined; }
  public get sharingRulesPackage()              { return this.isPrepared()  ? this._sharingRulesPackage             : undefined; }
  public get cleanupPackage()                   { return this.isPrepared()  ? this._cleanupPackage                  : undefined; }
  public get destructiveChanges()               { return this.isPrepared()  ? this._destructiveChanges              : undefined; }
  public get territory2ObjectsByDevName()       { return this.isPrepared()  ? this._territory2ObjectsByDevName      : undefined; }
  public get territory2ModelObjectsByDevName()  { return this.isPrepared()  ? this._territory2ModelObjectsByDevName : undefined; }
  public get territory2TypeObjectsByDevName()   { return this.isPrepared()  ? this._territory2TypeObjectsByDevName  : undefined; }
  public get territory2RuleObjectsByDevName()   { return this.isPrepared()  ? this._territory2RuleObjectsByDevName  : undefined; }
  public get filePaths()                        { return this._filePaths; }
  public get prepared()                         { return this._prepared; }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @constructs  TmToolsTransform
   * @param       {TM1Context}  tm1Context  Required.
   * @param       {TM1ExtractionReport} tm1ExtractionReport Required.
   * @param       {TM1TransformFilePaths} tm1TransformFilePaths  Required.
   * @description Takes a Prepared TM1 Context and the directory paths where
   *              transformed TM2 metadata, record data, and intermediate files
   *              will be written.  After construction, the object is NOT ready
   *              for consumption so its "prepared" value is always FALSE on
   *              instantiation.
   * @public
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private constructor(tm1Context:Tm1Context, tm1ExtractionReport:TM1ExtractionReport, tm1TransformFilePaths:TM1TransformFilePaths) {

    // Save the TM1 Context and TM1 Extraction Report
    this._tm1Context          = tm1Context;
    this._tm1ExtractionReport = tm1ExtractionReport;

    // Define the expected TM1 file paths.
    this._filePaths = tm1TransformFilePaths;

    // Initialize Maps
    this._territory2ObjectsByDevName       = new Map<string, Territory2>();
    this._territory2ModelObjectsByDevName  = new Map<string, Territory2Model>();
    this._territory2TypeObjectsByDevName   = new Map<string, Territory2Type>();
    this._territory2RuleObjectsByDevName   = new Map<string, Territory2Rule>();

    // Mark this object instance as UNPREPARED.
    this._prepared = false;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      createIntermediateFiles
   * @return      {Promise<TM1TransformationReport>}
   * @description Executes the transformation of TM1 data into a set of
   *              intermediate files that can be used later.
   * @public
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public async createIntermediateFiles():Promise<TM1TransformationReport> {
    
    // Create TM1 to TM2 DevName Map.
    await this.createTm1ToTm2DevNameMap();

    // Create the intermediate Territory2 CSV file.
    await this.createTerritory2IntermediateCsv();

    // Create the intermediate User/Territory2 Association CSV file.
    await this.createUserTerritory2AssociationIntermediateCsv();

    // Create the intermediate Object/Territory2 Association CSV file.
    await this.createObjectTerritory2AssociationIntermediateCsv();

    // Generate a TM1 Transformation Report and return it to the caller.
    return this.generateReport();
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      generateReport
   * @return      {TM1TransformationReport} Builds a complete JSON representation
   *              of the aftermath of a TM1 Transformation.
   * @description ???
   * @public
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public generateReport():TM1TransformationReport {
    /*
    const tm1TransformationReport:TM1TransformationReport = {
      orgInfo: this._tm1ExtractionReport.orgInfo

    };
    SfdxFalconDebug.obj(`${dbgNs}generateReport:tm1TransformationReport:`, tm1TransformationReport);
    return tm1TransformationReport;
    //*/
    return null;
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      transformMetadata
   * @return      {Promise<TM1TransformationReport>}
   * @description Executes the transformation of TM1 metadata and data into TM2
   *              metadata and data.
   * @public
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public async transformMetadata():Promise<TM1TransformationReport> {
    
    // Create Territory2Model Objects
    this.createTerritory2ModelObjects();

    // Create Territory2Type Objects
    this.createTerritory2TypeObjects();

    // Create Territory2Rule Objects
    this.createTerritory2RuleObjects();

    // Create Territory2 Objects
    this.createTerritory2Objects();

    // Create SharingRule Objects
    this.createSharingRuleObjects();

    // Create Package Object for the MAIN Deployment
    this.createPackageObjectForMainDeployment();

    // Create Package Object for the SHARING RULES Deployment
    this.createPackageObjectForSharingRulesDeployment();

    // Create Package Object for the CLEANUP Deployment
    this.createPackageObjectForCleanupDeployment();

    // Generate a TM1 Transformation Report and return it to the caller.
    return this.generateReport();
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      writeAll
   * @return      {Promise<void>}
   * @description Writes the complete set of transformed TM2 data and metadata
   *              to the local filesystem.
   * @public @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public async writeAll():Promise<void> {
    await this.writeMetadata();
    await this.writeData();
    await this.writeIntermediateFiles();
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      writeData
   * @return      {Promise<void>}
   * @description Writes transformed TM2 data to the local filesystem.
   * @public @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public async writeData():Promise<void> {

    // TODO: Need to power this up.
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      writeIntermediateFiles
   * @return      {Promise<void>}
   * @description Writes special "intermediate" files to the local filesystem.
   * @public @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public async writeIntermediateFiles():Promise<void> {

    // TODO: Need to power this up.
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      writeMetadata
   * @return      {Promise<void>}
   * @description Writes transformed TM2 metadata to the local filesystem.
   * @public @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  public async writeMetadata():Promise<void> {

    // Write package manifest (package.xml).
    await this.mainPackage.writeXml(this.filePaths.tm2MainDeploymentDir);

    // Write Territory2Type metadata files (territory2Types/DEV_NAME.territory2Type)
    for (const territory2Type of this.territory2TypeObjectsByDevName.values()) {
      await territory2Type.writeXml(this.filePaths.tm2MainDeploymentDir);
    }

    // Write Territory2Model metadata files (territory2Models/DEV_NAME/DEV_NAME.territory2Model)
    for (const territory2Model of this.territory2ModelObjectsByDevName.values()) {
      await territory2Model.writeXml(this.filePaths.tm2MainDeploymentDir);
    }

    // Write Territory2Rule metadata files (territory2Models/PARENT_MODEL_DEV_NAME/rules/DEV_NAME.territory2Rule)
    for (const territory2Rule of this.territory2RuleObjectsByDevName.values()) {
      await territory2Rule.writeXml(this.filePaths.tm2MainDeploymentDir);
    }

    // Write Territory2 metadata files (territory2Models/PARENT_MODEL_DEV_NAME/territories/DEV_NAME.territory2)
    for (const territory2 of this.territory2ObjectsByDevName.values()) {
      await territory2.writeXml(this.filePaths.tm2MainDeploymentDir);
    }

    // TODO: Write Sharing Rules Metadata


    // TODO: Write Cleanup Metadata


  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      createObjectTerritory2AssociationIntermediateCsv
   * @return      {void}
   * @description ???
   * @private @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private async createObjectTerritory2AssociationIntermediateCsv():Promise<void> {

    // TODO: Implement this function.

  }


  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      createPackageObjectForCleanupDeployment
   * @return      {void}
   * @description Creates a Package object (ie. package.xml) for use by the
   *              special TM1 "cleanup deployment" operation.
   * @private
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private createPackageObjectForCleanupDeployment():void {
    const packageTypes  = [];
    const {falcon}      = require('../../../package.json'); // The version of the SFDX-Falcon plugin

    // TODO: The package.xml for this use case may not be designed properly. Please test and fix.

    // SharingCriteriaRule
    packageTypes.push({
      members:  ['*'],
      name:     'SharingCriteriaRule'
    });

    // SharingOwnerRule
    packageTypes.push({
      members:  ['*'],
      name:     'SharingOwnerRule'
    });

    // Create the CLEANUP Package object.
    this._cleanupPackage = new Package({
      types:    packageTypes,
      version:  falcon.sfdcApiVersion,
      filePath: this.filePaths.tm1SharingRulesCleanupDir
    });
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      createPackageObjectForMainDeployment
   * @return      {void}
   * @description Creates a Package object (ie. package.xml) for use by the
   *              main TM2 deployment operation (the one that first puts the
   *              TM2 Territories in the target org).
   * @private
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private createPackageObjectForMainDeployment():void {
    const packageTypes  = [];
    const {falcon}      = require('../../../package.json'); // The version of the SFDX-Falcon plugin

    // Territory2
    packageTypes.push({
      members:  ['*'],
      name:     'Territory2'
    });

    // Territory2Model
    packageTypes.push({
      members:  ['*'],
      name:     'Territory2Model'
    });

    // Territory2Rule
    packageTypes.push({
      members:  ['*'],
      name:     'Territory2Rule'
    });

    // Territory2Type
    packageTypes.push({
      members:  ['*'],
      name:     'Territory2Type'
    });

    // Create the Package object.
    this._mainPackage = new Package({
      types:    packageTypes,
      version:  falcon.sfdcApiVersion,
      filePath: this.filePaths.tm2MainDeploymentDir
    });
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      createPackageObjectForSharingRulesDeployment
   * @return      {void}
   * @description Creates a Package object (ie. package.xml) for use by the
   *              secondary "sharing rules" TM2 deployment operation.
   * @private
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private createPackageObjectForSharingRulesDeployment():void {
    const packageTypes  = [];
    const {falcon}      = require('../../../package.json'); // The version of the SFDX-Falcon plugin


    // TODO: The package.xml for this use case may not be designed properly. Please test and fix.

    // SharingCriteriaRule
    packageTypes.push({
      members:  ['*'],
      name:     'SharingCriteriaRule'
    });

    // SharingOwnerRule
    packageTypes.push({
      members:  ['*'],
      name:     'SharingOwnerRule'
    });

    // Create the Package object.
    this._sharingRulesPackage = new Package({
      types:    packageTypes,
      version:  falcon.sfdcApiVersion,
      filePath: this.filePaths.tm2SharingRulesDeploymentDir
    });
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      createSharingRuleObjects
   * @return      {void}
   * @description Creates all required SharingRule objects.
   * @private
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private createSharingRuleObjects():void {
    this._territory2ModelObjectsByDevName.set(
      territory2ModelDevName,
      new Territory2Model({
        name:           `Imported Territory`,
        developerName:  territory2ModelDevName,
        description:    `Auto-generated Territory Model. Created as part of the TM1 to TM2 migration process.`,
        filePath:       path.join(this.filePaths.tm2MainDeploymentDir, 'territory2Models', territory2ModelDevName)
      })
    );
  }




  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      createTerritory2IntermediateCsv
   * @return      {void}
   * @description ???
   * @private @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private async createTerritory2IntermediateCsv():Promise<void> {

    // TODO: Implement this function.

  }




  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      createTerritory2Objects
   * @return      {void}
   * @description Creates all required Territory2 objects.
   * @private
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private createTerritory2Objects():void {
    for (const territoryRecord of this._tm1Context.territoryRecords) {
      const parentTerritoryRecord = this._tm1Context.territoryRecordsById.get(territoryRecord.ParentTerritoryId);
      const territory2Model       = this._territory2ModelObjectsByDevName.get('Imported_Territory');
      const territory2Type        = this._territory2TypeObjectsByDevName.get('Imported_Territory');

      // TODO: Validate territory2Model
      // TODO: Validate territory2Type

      this._territory2ObjectsByDevName.set(
        territoryRecord.DeveloperName,
        new Territory2({
          territory2Model:            territory2Model,
          territory2Type:             territory2Type,
          territoryRecord:            territoryRecord,
          parentTerritoryRecord:      parentTerritoryRecord,
          ataRuleRecords:             this._tm1Context.ataRuleRecordsByTerritoryId.get(territoryRecord.Id) || [],
          ataRuleDevNamesByRuleId:    this._tm1Context.ataRuleDevNamesByRuleId
        })
      );
    }
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      createTerritory2ModelObjects
   * @return      {void}
   * @description Creates all required Territory2Model objects.
   * @private
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private createTerritory2ModelObjects():void {
    this._territory2ModelObjectsByDevName.set(
      territory2ModelDevName,
      new Territory2Model({
        name:           `Imported Territory`,
        developerName:  territory2ModelDevName,
        description:    `Auto-generated Territory Model. Created as part of the TM1 to TM2 migration process.`,
        filePath:       path.join(this.filePaths.tm2MainDeploymentDir, 'territory2Models', territory2ModelDevName)
      })
    );
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      createTerritory2RuleObjects
   * @return      {void}
   * @description Creates all required Territory2Rule objects.
   * @private
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private createTerritory2RuleObjects():void {
    for (const ataRuleRecord of this._tm1Context.ataRuleRecords) {
      const ataRuleDevName  = this._tm1Context.ataRuleDevNamesByRuleId.get(ataRuleRecord.Id);
      const territory2Model = this._territory2ModelObjectsByDevName.get(territory2ModelDevName);
      this._territory2RuleObjectsByDevName.set(
        ataRuleDevName,
        new Territory2Rule({
          developerName:              ataRuleDevName,
          ataRuleRecord:              ataRuleRecord,
          ataRuleItemRecordsByRuleId: this._tm1Context.ataRuleItemRecordsByRuleId,
          objectType:                 'Account',
          territory2Model:            territory2Model
        })
      );
    }
  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      createTerritory2TypeObjects
   * @return      {void}
   * @description Creates all required Territory2Type objects.
   * @private
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private createTerritory2TypeObjects():void {
    this._territory2TypeObjectsByDevName.set(
      territory2TypeDevName,
      new Territory2Type({
        name:           `Imported Territory`,
        developerName:  territory2TypeDevName,
        priority:       `1`,
        filePath:       path.join(this.filePaths.tm2MainDeploymentDir, 'territory2Types')
      })
    );
  }





  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      createTm1ToTm2DevNameMap
   * @return      {void}
   * @description ???
   * @private @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private async createTm1ToTm2DevNameMap():Promise<void> {

    // TODO: Implement this function.

  }

  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      createUserTerritory2AssociationIntermediateCsv
   * @return      {void}
   * @description ???
   * @private @async
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private async createUserTerritory2AssociationIntermediateCsv():Promise<void> {

    // TODO: Implement this function.

  }



  //───────────────────────────────────────────────────────────────────────────┐
  /**
   * @method      isPrepared
   * @return      {boolean}
   * @description Returns true if an object instance is prepared. Throws an
   *              error otherwise.
   * @private
   */
  //───────────────────────────────────────────────────────────────────────────┘
  private isPrepared():boolean {
    if (this._prepared !== true) {
      throw new SfdxFalconError ( `TmToolsTransform members are not accessible until the instance is prepared`
                                , `ContextNotPrepared`
                                , `${dbgNs}isPrepared`);
    }
    else {
      return this._prepared;
    }
  }
}
